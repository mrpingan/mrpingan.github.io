<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrpingan.github.io</id>
    <title>Ping&apos;s Home</title>
    <updated>2019-07-01T07:36:00.215Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrpingan.github.io"/>
    <link rel="self" href="https://mrpingan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mrpingan.github.io/images/avatar.png</logo>
    <icon>https://mrpingan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Ping&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[Django 中的 context_processors 好处]]></title>
        <id>https://mrpingan.github.io/post/django-zhong-de-context_processors-hao-chu</id>
        <link href="https://mrpingan.github.io/post/django-zhong-de-context_processors-hao-chu">
        </link>
        <updated>2019-06-23T13:48:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="context_processors"><code>context_processors</code></h1>
<p>从字面上理解为上下文，会将请求对象作为参数并以字典的方式合并到context中返回。比如，使用<code>render</code>函数的时候，就需要返回context，有了<code>context_processors</code>,就可以不用再去给模板传递过多的参数。在默认生成的配置文件<code>settings.py</code>中，默认模板引擎包含以下上下文处理器：</p>
<pre><code class="language-python">[
		'django.template.context_processors.debug',
    'django.template.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
]

</code></pre>
<p>除此之外，请求上下文默认开启<code>django.template.context_processors.csrf</code>，这是为了安全考虑，而且已经硬编码了，不能在<code>context_processors</code>中关闭。这就是为什么我们可以在模板中直接使用 <code>{{ csrf_token }}</code>的原因</p>
<p>每一个处理器有顺序。这意味着，如果一个处理器添加了一个变量到上下文，第二个处理器也添加了一个同名的变量到上下文，这样，第二个添加的变量的值会覆盖第一个。</p>
<h2 id="内建的模板上下文处理器">内建的模板上下文处理器</h2>
<h3 id="djangocontribauthcontext_processorsauth">django.contrib.auth.context_processors.auth</h3>
<p>如果这个处理器开启了，每一个请求上下文都将下面的变量：</p>
<ul>
<li><strong>user</strong></li>
</ul>
<p>当前登陆的user对象，或者一个匿名user对象。可以在模板中通过 **{{ user.username }}**调用</p>
<ul>
<li><code>perms</code></li>
</ul>
<p>当前登陆用户的所有实例。可以在模板中通过<code>{{ perms.models_name.permission_name }}</code>调用</p>
<h3 id="djangotemplatecontext_processorsdebug">django.template.context_processors.debug</h3>
<p>如果这个选项开启了，每一个请求上下文都将包含下面两个变量。但是只有你的<code>DEBUG</code>设置为<code>True</code>,而且请求的IP地址（<code>request.META['REMOTE_ADDR']</code>）在<code>INTERNAL_IPS</code>设置的列表中：</p>
<ul>
<li>debug</li>
</ul>
<p>可以使用这个变量来测试是否你正处于<code>DEBUG</code>模式</p>
<ul>
<li>sql_queries</li>
</ul>
<p>一个<code>{'sql': ..., 'time': ...}</code>的字典，展示了当前请求的每一个SQL以及执行时间，Django有一个swagger插件可以。</p>
<h3 id="djangotemplatecontext_processorsi18n">django.template.context_processors.i18n</h3>
<p>这个是国际化的一个组件。开启后，在模板中将可以使用一下变量</p>
<ul>
<li>LANGUAGES</li>
</ul>
<p>当前的<code>LANGUAGES</code>设置</p>
<ul>
<li>LANGUAGE_BIDI</li>
<li>LANGUAGE_CODE</li>
</ul>
<h3 id="djangotemplatecontext_processorsmedia">django.template.context_processors.media</h3>
<p>开启后，每一个请求上下文将包含一个<code>MEDIA_URL</code>变量，可以在模板中提供<code>MEDIA_URL</code>的值</p>
<ul>
<li>MEDIA_URL</li>
</ul>
<h3 id="djangotemplatecontext_processorsstatic">django.template.context_processors.static</h3>
<p>开启后，可以在模板中使用 <code>STATIC_URL</code>变量，可以在模板中提供<code>STATIC_URL</code>的在<code>setttings.py</code>中的值，</p>
<ul>
<li>STATIC_URL</li>
</ul>
<h3 id="djangotemplatecontext_processorscsrf">django.template.context_processors.csrf</h3>
<p>这个处理器提供了<strong>csrf_token</strong>模板tag需要的token，用户避免跨站请求攻击</p>
<h3 id="djangotemplatecontext_processorsrequest">django.template.context_processors.request</h3>
<p>这个处理器开启后，每一个处理器上下文都将包含一个<code>request</code>变量，就是当前的<code>HttpRequest</code></p>
<ul>
<li>request</li>
</ul>
<h3 id="djangotemplatecontext_processorstz">django.template.context_processors.tz</h3>
<p>这个处理器开启后，每一个请求上下文都将包含一个<code>TIME_ZONE</code>变量，提供当前的时区</p>
<h3 id="djangocontribmessagescontext_processorsmessages">django.contrib.messages.context_processors.messages</h3>
<p>这个处理器开启后，每一个请求上下文都将包含下面两个变量</p>
<ul>
<li>messages</li>
</ul>
<p>通过django的消息框架设置的messages的列表</p>
<ul>
<li>DEFAULT_MESSAGE_LEVELS</li>
</ul>
<p>一组消息级别名称到其数值的映射</p>
<table>
<thead>
<tr>
<th>Level Constant</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEBUG</td>
<td>10</td>
</tr>
<tr>
<td>INFO</td>
<td>20</td>
</tr>
<tr>
<td>SUCCESS</td>
<td>25</td>
</tr>
<tr>
<td>WARNING</td>
<td>30</td>
</tr>
<tr>
<td>ERROR</td>
<td>40</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mrpingan.github.io/post/hello-gridea</id>
        <link href="https://mrpingan.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>