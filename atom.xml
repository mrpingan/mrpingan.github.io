<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrpingan.github.io/</id>
    <title>Ping&apos;s Home</title>
    <updated>2020-11-26T07:54:27.221Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrpingan.github.io/"/>
    <link rel="self" href="https://mrpingan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mrpingan.github.io/images/avatar.png</logo>
    <icon>https://mrpingan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ping&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[mac下版本降级]]></title>
        <id>https://mrpingan.github.io/post/mac-xia-ban-ben-jiang-ji/</id>
        <link href="https://mrpingan.github.io/post/mac-xia-ban-ben-jiang-ji/">
        </link>
        <updated>2020-11-26T07:51:23.000Z</updated>
        <content type="html"><![CDATA[<p>本地的node版本太高，导致前端项目   <code>npm run dev</code> 失败。选择降级</p>
<h2 id="按照node版本管理模块n">按照node版本管理模块n</h2>
<pre><code>npm install n -g

</code></pre>
<h2 id="版本降级升级">版本降级/升级</h2>
<pre><code># n 版本号，例如：10.16.2
sudo n 10.16.2
</code></pre>
<h2 id="按照稳定版">按照稳定版</h2>
<pre><code>sudo n stable
</code></pre>
<h2 id="安装最新版">安装最新版</h2>
<pre><code>sudo n latest
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac安装ffmpeg之后python环境ssl无法使用]]></title>
        <id>https://mrpingan.github.io/post/mac-an-zhuang-ffmpeg-zhi-hou-python-huan-jing-ssl-wu-fa-shi-yong/</id>
        <link href="https://mrpingan.github.io/post/mac-an-zhuang-ffmpeg-zhi-hou-python-huan-jing-ssl-wu-fa-shi-yong/">
        </link>
        <updated>2020-11-25T08:59:15.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="pip安装依赖错误">pip安装依赖错误</h1>
<pre><code>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
Collecting fabric2
  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
</code></pre>
<p>安装Google上的方法并无效：</p>
<pre><code>brew install openssl
brew unlink openssl &amp;&amp; brew link openssl --force
</code></pre>
<p>执行一直报这个错误</p>
<pre><code>Warning: Refusing to link macOS provided/shadowed software: openssl@1.1
If you need to have openssl@1.1 first in your PATH run:
  echo 'export PATH=&quot;/usr/local/opt/openssl@1.1/bin:$PATH&quot;' &gt;&gt; /Users/ping/.bash_profile

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib&quot;
  export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;

For pkg-config to find openssl@1.1 you may need to set:
  export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl@1.1/lib/pkgconfig&quot;
</code></pre>
<h1 id="解决方案">解决方案</h1>
<pre><code>brew switch openssl 1.0.2s
</code></pre>
<p>*<em>1.0.2s</em></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="pip安装依赖错误">pip安装依赖错误</h1>
<pre><code>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
Collecting fabric2
  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
</code></pre>
<p>安装Google上的方法并无效：</p>
<pre><code>brew install openssl
brew unlink openssl &amp;&amp; brew link openssl --force
</code></pre>
<p>执行一直报这个错误</p>
<pre><code>Warning: Refusing to link macOS provided/shadowed software: openssl@1.1
If you need to have openssl@1.1 first in your PATH run:
  echo 'export PATH=&quot;/usr/local/opt/openssl@1.1/bin:$PATH&quot;' &gt;&gt; /Users/ping/.bash_profile

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib&quot;
  export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;

For pkg-config to find openssl@1.1 you may need to set:
  export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl@1.1/lib/pkgconfig&quot;
</code></pre>
<h1 id="解决方案">解决方案</h1>
<pre><code>brew switch openssl 1.0.2s
</code></pre>
<p>*<em>1.0.2s</em></p>
<!-- more -->
<ul>
<li>可以看你本地上openssl的文件路径，比如我的文件路径如下</li>
</ul>
<pre><code>/usr/local/Cellar/openssl/1.0.2s/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[命令行]]></title>
        <id>https://mrpingan.github.io/post/ming-ling-xing/</id>
        <link href="https://mrpingan.github.io/post/ming-ling-xing/">
        </link>
        <updated>2020-10-30T06:56:23.000Z</updated>
        <content type="html"><![CDATA[<p>https://gitee.com/hequan2020/autoops</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ssh登录出现Permission denied (publickey).]]></title>
        <id>https://mrpingan.github.io/post/ssh-deng-lu-chu-xian-permission-denied-publickey/</id>
        <link href="https://mrpingan.github.io/post/ssh-deng-lu-chu-xian-permission-denied-publickey/">
        </link>
        <updated>2020-10-28T05:02:48.000Z</updated>
        <content type="html"><![CDATA[<p>https://askubuntu.com/questions/872297/sshd-user-username-not-allowed-because-shell-zsh-does-not-exist</p>
<p>查看<code>/var/log/auth.log</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django使用channels实现websocket]]></title>
        <id>https://mrpingan.github.io/post/django-shi-yong-channels-shi-xian-websocket/</id>
        <link href="https://mrpingan.github.io/post/django-shi-yong-channels-shi-xian-websocket/">
        </link>
        <updated>2020-10-28T02:22:32.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.jianshu.com/p/0f75e2623418</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pg配置分区插件pg_pathman]]></title>
        <id>https://mrpingan.github.io/post/pg-pei-zhi-fen-qu-cha-jian-pg_pathman/</id>
        <link href="https://mrpingan.github.io/post/pg-pei-zhi-fen-qu-cha-jian-pg_pathman/">
        </link>
        <updated>2020-10-25T14:53:14.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.programmersought.com/article/25792165890/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[disk]]></title>
        <id>https://mrpingan.github.io/post/disk/</id>
        <link href="https://mrpingan.github.io/post/disk/">
        </link>
        <updated>2020-10-22T07:12:29.000Z</updated>
        <content type="html"><![CDATA[<p>write-through<br>
vs<br>
write-back</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue项目组axios.all is not funciton问题]]></title>
        <id>https://mrpingan.github.io/post/vue-xiang-mu-zu-axiosall-is-not-funciton-wen-ti/</id>
        <link href="https://mrpingan.github.io/post/vue-xiang-mu-zu-axiosall-is-not-funciton-wen-ti/">
        </link>
        <updated>2020-10-20T06:25:03.000Z</updated>
        <content type="html"><![CDATA[<p>我们的项目在很多时候，不想使用<code>axios</code>默认的配置，都需要使用自定义设置的<code>axios</code>实例。比如：</p>
<pre><code class="language-vue">import axios from 'axios'

// create an axios instance
const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
  withCredentials: true, // send cookies when cross-domain requests
  timeout: 50000 // request timeout
})
export default service
</code></pre>
<p>设置完后，使用<code>get</code>、<code>post</code>、<code>put</code>等基础的http方法是没有问题的。但是如果使用<code>all</code>、<code>spread</code>、<code>Cancel</code>、<code>CancelToken</code>、<code>isCancel</code>方法，console将会报错</p>
<pre><code>axios.all is not a function
</code></pre>
<h1 id="解决方案">解决方案</h1>
<p>只需要在封装的<code>axios</code>文件中加入</p>
<pre><code class="language-vue">service.all = axios.all
service.spread = axios.spread
</code></pre>
<p>因此，上面的文件变成这样</p>
<pre><code class="language-vue">import axios from 'axios'

// create an axios instance
const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
  withCredentials: true, // send cookies when cross-domain requests
  timeout: 50000 // request timeout
})

service.all = axios.all
service.spread = axios.spread

export default service
</code></pre>
<p>这样，再去调用<code>all</code>、<code>spread</code>方法就不会报错了，其他的方法也是同样道理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django request.POST与request.body]]></title>
        <id>https://mrpingan.github.io/post/django-requestpost-yu-requestbody/</id>
        <link href="https://mrpingan.github.io/post/django-requestpost-yu-requestbody/">
        </link>
        <updated>2020-09-23T03:05:28.000Z</updated>
        <content type="html"><![CDATA[<p>django中的request.POST只能取到Content-Type（请求头）为<code>application/x-www-form-urlencoded</code>(form表单默认格式)的数据，如果请求头为<code>application/json</code>，request.POST中的数据为空，只能在request.body中能取到原生的数据。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django前端双引号问题]]></title>
        <id>https://mrpingan.github.io/post/django-qian-duan-shuang-yin-hao-wen-ti/</id>
        <link href="https://mrpingan.github.io/post/django-qian-duan-shuang-yin-hao-wen-ti/">
        </link>
        <updated>2020-08-28T03:42:32.000Z</updated>
        <content type="html"><![CDATA[<p>django 前端的特殊符合，比如双引号。通过ajax传到后端会被转义为<code>&amp;quot;</code>，所以需要在前端进行处理</p>
<ul>
<li><code>&lt;</code> 会被转义为<code>&amp;lt</code></li>
<li><code>&gt;</code> 会被转义为<code>&amp;gt</code></li>
<li><code>'</code> 会被转义为 <code>&amp;#x27;</code></li>
<li><code>&quot;</code> 会被转义为 <code>&amp;quot;</code></li>
<li><code>&amp;</code> 会被转义为 <code>&amp;amp;</code></li>
</ul>
<pre><code># 如果在前端的字符是通过django 模板渲染的，可以使用模板过滤器
# 比如前端的sql语句
var sql_content = &quot;{{ sql_content | safe }}&quot;

# 这样传到后端双引号就不会被转义为 &amp;quot;

</code></pre>
<h1 id="safe模板过滤器">safe模板过滤器</h1>
<p>django模板引擎会自动将变量转义，所以如果你不想变量被转义。可以使用<code>safe</code>模板过滤器，这样使用</p>
<pre><code class="language-jinja2">{{ title | safe }}
</code></pre>
<p>但是，这样可能会存在html注入的安全风险，因为<code>safe</code>过滤器表示这个变量是可信任的，是安全的。</p>
<h1 id="autoescape模板标签">autoescape模板标签</h1>
<p>也可以使用<code>autoescape</code>模板标签来禁止转义，这样使用</p>
<pre><code class="language-jinjia2">{% autoescape off %}
    {{ title }}
{% endautoescape %}
</code></pre>
<p>默认为<strong>on</strong>，使用<strong>off</strong>可以将标签内的变量关闭自动转义</p>
<h1 id="escapejs模板过滤器">escapejs模板过滤器</h1>
<p>在javascripts里面，有时候需要对字符进行转义，避免出现语法错误。<br>
比如：有变量<code>val='select &quot;aaa&quot; in tables'</code><br>
在scripts标签中使用，我们会这样解析出来。</p>
<pre><code class="language-js">var a = &quot;{{ val }}&quot;
</code></pre>
<p>这样，在渲染的时候就会报语法错误，因为变量a被解析成<code>&quot;select &quot;aaa&quot; in tables&quot;</code><br>
这个时候，使用<code>{{ val | escapejs }}</code>就可以正常避免这样的问题。</p>
]]></content>
    </entry>
</feed>