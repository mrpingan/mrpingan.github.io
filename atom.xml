<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrpingan.github.io/</id>
    <title>Ping&apos;s Home</title>
    <updated>2020-12-07T12:52:20.936Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrpingan.github.io/"/>
    <link rel="self" href="https://mrpingan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mrpingan.github.io/images/avatar.png</logo>
    <icon>https://mrpingan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ping&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[使用setTimeout取代setInterval]]></title>
        <id>https://mrpingan.github.io/post/shi-yong-settimeout-qu-dai-setinterval/</id>
        <link href="https://mrpingan.github.io/post/shi-yong-settimeout-qu-dai-setinterval/">
        </link>
        <updated>2020-12-07T12:43:10.000Z</updated>
        <content type="html"><![CDATA[<p>使用setInterval在轮询方面有一个弊端，代码如下<br>
handleShowLog定时3s查询后端日志，当getDeployLog这个接口函数能在3s内正常返回数据时，ajax事件不会堆积，但是如果在3s内不能正常返回，就会不断的生成获取日志的请求，极大的消耗服务器资源。</p>
<pre><code class="language-javascript">handleShowLog() {
    //注意这个this
      let _this = this
      this.showDeployLog = true
      const params = {
        'node_key': _this.node_key,
        'jenkins_build_num': _this.jenkins_build_num,
        'jenkins_build_name': _this.jenkins_build_name
      }
      if(_this.timer != null) {
        return
      }
      this.timer = setInterval(function f() {
        getDeployLog(params)
          .then((res) =&gt; {
            _this.log = res.res
            if(!res.moreData) {
              _this.isLoading = false
              console.log(_this.log)
              clearInterval(this.timer)
              // setInterval(_this.time)
            }
          })
          .catch(err =&gt; {
            _this.$message.error('日志获取失败: ' + err)
          })
      }, 0)
    }
</code></pre>
<p>#使用setTimeout优化</p>
<pre><code class="language-javascript">handleShowLog() {
      //注意这儿的this
      let _this = this
      this.showDeployLog = true
      const params = {
        'node_key': _this.node_key,
        'jenkins_build_num': _this.jenkins_build_num,
        'jenkins_build_name': _this.jenkins_build_name
      }
      if(_this.timer != null) {
        return
      }
      this.timer = setInterval(function f() {
        getDeployLog(params)
          .then((res) =&gt; {
            _this.log = res.res
            if(!res.moreData) {
              _this.isLoading = false
              console.log(_this.log)
              // clearInterval(this.timer)
              clearTimeout(_this.time)
            } else {
              setTimeout(f, 3000)
            }
          })
          .catch(err =&gt; {
            _this.$message.error('日志获取失败: ' + err)
          })
      }, 0)
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git 拉取代码失败]]></title>
        <id>https://mrpingan.github.io/post/git-la-qu-dai-ma-shi-bai/</id>
        <link href="https://mrpingan.github.io/post/git-la-qu-dai-ma-shi-bai/">
        </link>
        <updated>2020-12-03T11:50:34.000Z</updated>
        <content type="html"><![CDATA[<p>#错误</p>
<pre><code class="language-bash">19:18:06 From code.dding.net:server/lease-platform/pms-api
19:18:06    df96594..b8ce1ea  dev_zhangdan2_fanghao -&gt; origin/dev_zhangdan2_fanghao
19:18:06    d7fd965..479ad2a  develop    -&gt; origin/develop
19:18:06  + 37728f6...751937b feature/tbs_refine_v2 -&gt; origin/feature/tbs_refine_v2  (forced update)
19:18:06  * [new branch]      fix-electric -&gt; origin/fix-electric
19:18:06 error: cannot lock ref 'refs/remotes/origin/hotfix': 'refs/remotes/origin/hotfix/device' exists; cannot create 'refs/remotes/origin/hotfix'
19:18:06  ! [new branch]      hotfix     -&gt; origin/hotfix  (**unable to update local ref**)
19:18:06  + 2adfd1b...6b06cbe redis_youhua -&gt; origin/redis_youhua  (forced update)
19:18:06    32bae50..11f4dbc  release    -&gt; origin/release
19:18:06  * [new branch]      templateFix -&gt; origin/templateFix
19:18:06  * [new branch]      yudingBillFix -&gt; origin/yudingBillFix
19:18:06  * [new branch]      zhangdan2-develop -&gt; origin/zhangdan2-develop
19:18:06    914e845..ada877f  zhangdan2-pre -&gt; origin/zhangdan2-pre
19:18:06    741647a..275d13c  zhangdan3-test -&gt; origin/zhangdan3-test
19:18:06    27beb65..0b2b9e8  zhangdan3_fanghao -&gt; origin/zhangdan3_fanghao
</code></pre>
<p>#解决方案</p>
<pre><code class="language-bash">git gc --prune=now
git remote prune origi
</code></pre>
<p>清理本地仓库，由于一些ref在远处已删除，本地还保留，因此需要清理下下</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac下版本降级]]></title>
        <id>https://mrpingan.github.io/post/mac-xia-ban-ben-jiang-ji/</id>
        <link href="https://mrpingan.github.io/post/mac-xia-ban-ben-jiang-ji/">
        </link>
        <updated>2020-11-26T07:51:23.000Z</updated>
        <content type="html"><![CDATA[<p>本地的node版本太高，导致前端项目   <code>npm run dev</code> 失败。选择降级</p>
<h2 id="按照node版本管理模块n">按照node版本管理模块n</h2>
<pre><code>npm install n -g

</code></pre>
<h2 id="版本降级升级">版本降级/升级</h2>
<pre><code># n 版本号，例如：10.16.2
sudo n 10.16.2
</code></pre>
<h2 id="按照稳定版">按照稳定版</h2>
<pre><code>sudo n stable
</code></pre>
<h2 id="安装最新版">安装最新版</h2>
<pre><code>sudo n latest
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac安装ffmpeg之后python环境ssl无法使用]]></title>
        <id>https://mrpingan.github.io/post/mac-an-zhuang-ffmpeg-zhi-hou-python-huan-jing-ssl-wu-fa-shi-yong/</id>
        <link href="https://mrpingan.github.io/post/mac-an-zhuang-ffmpeg-zhi-hou-python-huan-jing-ssl-wu-fa-shi-yong/">
        </link>
        <updated>2020-11-25T08:59:15.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="pip安装依赖错误">pip安装依赖错误</h1>
<pre><code>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
Collecting fabric2
  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
</code></pre>
<p>安装Google上的方法并无效：</p>
<pre><code>brew install openssl
brew unlink openssl &amp;&amp; brew link openssl --force
</code></pre>
<p>执行一直报这个错误</p>
<pre><code>Warning: Refusing to link macOS provided/shadowed software: openssl@1.1
If you need to have openssl@1.1 first in your PATH run:
  echo 'export PATH=&quot;/usr/local/opt/openssl@1.1/bin:$PATH&quot;' &gt;&gt; /Users/ping/.bash_profile

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib&quot;
  export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;

For pkg-config to find openssl@1.1 you may need to set:
  export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl@1.1/lib/pkgconfig&quot;
</code></pre>
<h1 id="解决方案">解决方案</h1>
<pre><code>brew switch openssl 1.0.2s
</code></pre>
<p>*<em>1.0.2s</em></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="pip安装依赖错误">pip安装依赖错误</h1>
<pre><code>pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
Collecting fabric2
  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;,)': /simple/fabric2/
</code></pre>
<p>安装Google上的方法并无效：</p>
<pre><code>brew install openssl
brew unlink openssl &amp;&amp; brew link openssl --force
</code></pre>
<p>执行一直报这个错误</p>
<pre><code>Warning: Refusing to link macOS provided/shadowed software: openssl@1.1
If you need to have openssl@1.1 first in your PATH run:
  echo 'export PATH=&quot;/usr/local/opt/openssl@1.1/bin:$PATH&quot;' &gt;&gt; /Users/ping/.bash_profile

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib&quot;
  export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;

For pkg-config to find openssl@1.1 you may need to set:
  export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl@1.1/lib/pkgconfig&quot;
</code></pre>
<h1 id="解决方案">解决方案</h1>
<pre><code>brew switch openssl 1.0.2s
</code></pre>
<p>*<em>1.0.2s</em></p>
<!-- more -->
<ul>
<li>可以看你本地上openssl的文件路径，比如我的文件路径如下</li>
</ul>
<pre><code>/usr/local/Cellar/openssl/1.0.2s/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[命令行]]></title>
        <id>https://mrpingan.github.io/post/ming-ling-xing/</id>
        <link href="https://mrpingan.github.io/post/ming-ling-xing/">
        </link>
        <updated>2020-10-30T06:56:23.000Z</updated>
        <content type="html"><![CDATA[<p>https://gitee.com/hequan2020/autoops</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ssh登录出现Permission denied (publickey).]]></title>
        <id>https://mrpingan.github.io/post/ssh-deng-lu-chu-xian-permission-denied-publickey/</id>
        <link href="https://mrpingan.github.io/post/ssh-deng-lu-chu-xian-permission-denied-publickey/">
        </link>
        <updated>2020-10-28T05:02:48.000Z</updated>
        <content type="html"><![CDATA[<p>https://askubuntu.com/questions/872297/sshd-user-username-not-allowed-because-shell-zsh-does-not-exist</p>
<p>查看<code>/var/log/auth.log</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django使用channels实现websocket]]></title>
        <id>https://mrpingan.github.io/post/django-shi-yong-channels-shi-xian-websocket/</id>
        <link href="https://mrpingan.github.io/post/django-shi-yong-channels-shi-xian-websocket/">
        </link>
        <updated>2020-10-28T02:22:32.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.jianshu.com/p/0f75e2623418</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pg配置分区插件pg_pathman]]></title>
        <id>https://mrpingan.github.io/post/pg-pei-zhi-fen-qu-cha-jian-pg_pathman/</id>
        <link href="https://mrpingan.github.io/post/pg-pei-zhi-fen-qu-cha-jian-pg_pathman/">
        </link>
        <updated>2020-10-25T14:53:14.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.programmersought.com/article/25792165890/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[disk]]></title>
        <id>https://mrpingan.github.io/post/disk/</id>
        <link href="https://mrpingan.github.io/post/disk/">
        </link>
        <updated>2020-10-22T07:12:29.000Z</updated>
        <content type="html"><![CDATA[<p>write-through<br>
vs<br>
write-back</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue项目组axios.all is not funciton问题]]></title>
        <id>https://mrpingan.github.io/post/vue-xiang-mu-zu-axiosall-is-not-funciton-wen-ti/</id>
        <link href="https://mrpingan.github.io/post/vue-xiang-mu-zu-axiosall-is-not-funciton-wen-ti/">
        </link>
        <updated>2020-10-20T06:25:03.000Z</updated>
        <content type="html"><![CDATA[<p>我们的项目在很多时候，不想使用<code>axios</code>默认的配置，都需要使用自定义设置的<code>axios</code>实例。比如：</p>
<pre><code class="language-vue">import axios from 'axios'

// create an axios instance
const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
  withCredentials: true, // send cookies when cross-domain requests
  timeout: 50000 // request timeout
})
export default service
</code></pre>
<p>设置完后，使用<code>get</code>、<code>post</code>、<code>put</code>等基础的http方法是没有问题的。但是如果使用<code>all</code>、<code>spread</code>、<code>Cancel</code>、<code>CancelToken</code>、<code>isCancel</code>方法，console将会报错</p>
<pre><code>axios.all is not a function
</code></pre>
<h1 id="解决方案">解决方案</h1>
<p>只需要在封装的<code>axios</code>文件中加入</p>
<pre><code class="language-vue">service.all = axios.all
service.spread = axios.spread
</code></pre>
<p>因此，上面的文件变成这样</p>
<pre><code class="language-vue">import axios from 'axios'

// create an axios instance
const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
  withCredentials: true, // send cookies when cross-domain requests
  timeout: 50000 // request timeout
})

service.all = axios.all
service.spread = axios.spread

export default service
</code></pre>
<p>这样，再去调用<code>all</code>、<code>spread</code>方法就不会报错了，其他的方法也是同样道理。</p>
]]></content>
    </entry>
</feed>