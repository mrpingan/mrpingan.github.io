<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrpingan.github.io</id>
    <title>Ping&apos;s Home</title>
    <updated>2019-11-08T05:09:20.465Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrpingan.github.io"/>
    <link rel="self" href="https://mrpingan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mrpingan.github.io/images/avatar.png</logo>
    <icon>https://mrpingan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Ping&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[openldap 配置mirrormode]]></title>
        <id>https://mrpingan.github.io/post/openldap-pei-zhi-mirrormode</id>
        <link href="https://mrpingan.github.io/post/openldap-pei-zhi-mirrormode">
        </link>
        <updated>2019-11-08T03:28:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>MirrorMode 模式镜像同步模式，而且主服务器互相以推的方式实现目录树条目同步，最多允许且两台机器为主服务器。如果要添加更多节点，此时只能添加多台从服务器，而不能将添加的节点配置为主服务器</p>
<h1 id="准备">准备</h1>
<table>
<thead>
<tr>
<th>用途</th>
<th>IP</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>provider1</td>
<td>192.168.33.10</td>
<td></td>
</tr>
<tr>
<td>provider2</td>
<td>192.168.33.11</td>
<td></td>
</tr>
</tbody>
</table>
<p>两台服务器互为主备，但是只能在一个provider上写。</p>
<h1 id="安装ldap">安装ldap</h1>
<pre><code>apt install slapd ldap-utils

#重新配置
dpkg-reconfigure slapd
</code></pre>
<p>dn: dc=ping,dc=cn<br>
管理员密码：admin</p>
<p>两台服务器的DIT要保持一致</p>
<h1 id="开启日志如果已开启可忽略">开启日志(如果已开启可忽略)</h1>
<p>log.ldif文件内容如下：</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: stats sync
</code></pre>
<p>应用配置：</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f log.ldif
</code></pre>
<h1 id="加载syncprov模块">加载syncprov模块</h1>
<p>sync.ldif文件如下：</p>
<pre><code>dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: syncprov.la

dn: olcOverlay=syncprov,olcDatabase={1}hdb,cn=config
changetype: add
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpCheckpoint: 100 10
olcSpSessionLog: 100
</code></pre>
<p>注意：</p>
<ul>
<li>指定的dn存在</li>
<li>指定的Database要存在</li>
<li>模块文件存在，ubuntu 的模块目录一般在<code>/usr/lib/ldap</code>目录下,如果在其他目录下，可通过<code>olcModulePath</code>指定目录，也可查看<code>cn=module{0}.ldif</code>文件<code>olcModulePath</code>是否被指定</li>
</ul>
<p>应用配置：</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f sync.ldif
</code></pre>
<h1 id="配置mirror模式">配置mirror模式</h1>
<p>master01.ldif文件内容如下：<br>
master01的ip地址为: <code>192.168.33.10</code></p>
<pre><code>dn: cn=config
changetype: modify
replace: olcServerID
olcServerID: 1

dn: olcDatabase={1}hdb,cn=config
changetype: modify
replace: olcSyncRepl
olcSyncRepl: rid=001
             provider=ldap://192.168.33.11:389
             bindmethod=simple
             binddn=&quot;cn=admin,dc=ping,dc=cn&quot;
             credentials=admin
             searchbase=&quot;dc=ping,dc=cn&quot;
             filter=&quot;(objectClass=*)&quot;
             scope=sub
             schemachecking=off
             attrs=&quot;*,+&quot;
             type=refreshAndPersist
             retry=&quot;5 5 300 +&quot;
             interval=00:00:01:00
-
add: olcMirrorMode
olcMirrorMode: TRUE
-
add: olcDbIndex
olcDbIndex: entryUUID eq
-
add: olcDbIndex
olcDbIndex: entryCSN eq
</code></pre>
<p>注意：</p>
<ul>
<li>此处的<code>provider</code>指定的另一台服务器的ip</li>
<li><code>rid</code>要保持一致</li>
<li><code>olcServerID</code>要区分</li>
</ul>
<p>应用配置：</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f master01.ldif
</code></pre>
<p>master02.ldif文件内容如下：</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcServerID
olcServerID: 2

dn: olcDatabase={1}hdb,cn=config
changetype: modify
replace: olcSyncRepl
olcSyncRepl: rid=001
             provider=ldap://192.168.33.10:389
             bindmethod=simple
             binddn=&quot;cn=admin,dc=ping,dc=cn&quot;
             credentials=admin
             searchbase=&quot;dc=ping,dc=cn&quot;
             filter=&quot;(objectClass=*)&quot;
             scope=sub
             schemachecking=off
             attrs=&quot;*,+&quot;
             type=refreshAndPersist
             retry=&quot;5 5 300 +&quot;
             interval=00:00:01:00
-
add: olcMirrorMode
olcMirrorMode: TRUE
-
add: olcDbIndex
olcDbIndex: entryUUID eq
-
add: olcDbIndex
olcDbIndex: entryCSN eq
</code></pre>
<p>应用配置:</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f master02.ldif
</code></pre>
<h1 id="验证">验证</h1>
<p>1、查看日志：<br>
<img src="https://mrpingan.github.io/post-images/1573189656518.png" alt=""><br>
并未看到任何错误</p>
<p>2、添加用户<br>
在master01上添加用户，看master02上是否被同步</p>
<p>验证通过！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[查看发行版版本]]></title>
        <id>https://mrpingan.github.io/post/cha-kan-fa-xing-ban-ban-ben</id>
        <link href="https://mrpingan.github.io/post/cha-kan-fa-xing-ban-ban-ben">
        </link>
        <updated>2019-09-16T08:25:02.000Z</updated>
        <content type="html"><![CDATA[<p>在centos和ubuntu上都可以通过这条命令查看版本</p>
<pre><code>cat /etc/*-release
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jumpserver 连接ldap]]></title>
        <id>https://mrpingan.github.io/post/jumpserver-lian-jie-ldap</id>
        <link href="https://mrpingan.github.io/post/jumpserver-lian-jie-ldap">
        </link>
        <updated>2019-09-15T12:57:20.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://mrpingan.github.io/post-images/1568552305999.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[confluence连接ldaps]]></title>
        <id>https://mrpingan.github.io/post/confluence-lian-jie-ldaps</id>
        <link href="https://mrpingan.github.io/post/confluence-lian-jie-ldaps">
        </link>
        <updated>2019-09-10T04:22:51.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://mrpingan.github.io/post-images/1568089430883.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jxplorer连接LDAP]]></title>
        <id>https://mrpingan.github.io/post/jxplorer-lian-jie-ldap</id>
        <link href="https://mrpingan.github.io/post/jxplorer-lian-jie-ldap">
        </link>
        <updated>2019-09-08T05:20:46.000Z</updated>
        <content type="html"><![CDATA[<p><code>Jxplorer</code>是JAVA连接LDAP的客户端，支持多种连接SSL、SASL，同时也支持很多平台。官网下载地址：http://jxplorer.org/downloads/users.html。</p>
<h1 id="非安全连接">非安全连接</h1>
<p>如果LDAP服务端未开启TLS，此时建立的连接是非安全连接，使用的端口是389.<br>
<img src="https://mrpingan.github.io/post-images/1567920506007.png" alt=""><br>
填写对应的信息，就可以连接上了</p>
<h1 id="安全连接">安全连接</h1>
<p>LDAP使用的是SSL，即重新开启一个SSL端口来建立安全通道，不过这种方式已经被淘汰。取而代之的是STARTTLS，这种方式和389复用同一个通道，不过传输的数据都是加密的。<br>
我这儿使用的是SSL，而且使用的自签名CA证书。并未使用STARTTLS。</p>
<h2 id="导入ca证书">导入CA证书</h2>
<p>选择&quot;安全&quot; —— &quot;信任的服务器及CA&quot;<br>
<img src="https://mrpingan.github.io/post-images/1567920720636.png" alt=""><br>
选择&quot;新增凭证&quot;<br>
<img src="https://mrpingan.github.io/post-images/1567920784200.png" alt=""><br>
选择指定的CA证书，并为CA证书指定一个名称<br>
<img src="https://mrpingan.github.io/post-images/1567920819137.png" alt=""><br>
还需要输入一个密码，默认的密码是&quot;changeit&quot;<br>
<img src="https://mrpingan.github.io/post-images/1567920864163.png" alt=""><br>
点击&quot;确认&quot;之后就可以正常导入了</p>
<p>新建一个连接<br>
<img src="https://mrpingan.github.io/post-images/1567920948221.png" alt=""><br>
填写对应的信息，ssl的方式需要修改端口为636。如果LDAP使用的是STARTTLS的方式，则端口依然是389。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 7/RHEL 7配置OpenLDAP SSL]]></title>
        <id>https://mrpingan.github.io/post/centos-7rhel-7-pei-zhi-openldap-ssl</id>
        <link href="https://mrpingan.github.io/post/centos-7rhel-7-pei-zhi-openldap-ssl">
        </link>
        <updated>2019-09-07T09:01:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="预先准备">预先准备</h1>
<p>在<code>/etc/hosts</code>中添加一条LDAP服务端主机域名映射记录</p>
<pre><code>192.168.33.11 server.itzgeek.local server
</code></pre>
<h1 id="创建-ldap-证书">创建 LDAP 证书</h1>
<h2 id="自签名证书">自签名证书</h2>
<p>为LDAP服务端创建一个自签名证书,下面的命令将会在<code>/etc/openldap/certs/</code>生成证书和私钥</p>
<pre><code>openssl req -new -x509 -nodes -out /etc/openldap/certs/itzgeekldap.crt -keyout /etc/openldap/certs/itzgeekldap.key -days 1460
</code></pre>
<p>输出内容：</p>
<pre><code>Generating a 2048 bit RSA private key
.................................................................................+++
...................................+++
writing new private key to '/etc/openldap/certs/itzgeekldap.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:shenzhen
Locality Name (eg, city) [Default City]:shenzhen
Organization Name (eg, company) [Default Company Ltd]:ITzGeek
Organizational Unit Name (eg, section) []:IT Infra
Common Name (eg, your name or your server's hostname) []:server.itzgeek.local
Email Address []:admin@itzgeek.com
</code></pre>
<p>设置权限</p>
<pre><code>chown -R ldap:ldap /etc/openldap/certs/itzgeek*
</code></pre>
<p>查看创建的证书和私钥</p>
<pre><code>[root@server openldap]# ll /etc/openldap/certs/itz*
-rw-r--r--. 1 root root 1456 Sep  7 09:08 /etc/openldap/certs/itzgeekldap.crt
-rw-r--r--. 1 root root 1704 Sep  7 09:08 /etc/openldap/certs/itzgeekldap.key
</code></pre>
<p>创建<code>certs.ldif</code>配置LDAP使用自签名证书</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/itzgeekldap.crt
-
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/itzgeekldap.key
</code></pre>
<p>刷新配置：</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f certs.ldif
</code></pre>
<p>验证配置：</p>
<pre><code>slaptest -u
</code></pre>
<p>配置正确显示如下：</p>
<pre><code>config file testing succeeded
</code></pre>
<h1 id="自定义ca签名证书">自定义CA签名证书</h1>
<p>创建根私钥</p>
<pre><code>cd  /etc/openldap/certs/
openssl genrsa -out itzgeekrootCA.key 2048
</code></pre>
<p>创建自签名根证书</p>
<pre><code>openssl req -x509 -new -nodes -key itzgeekrootCA.key -sha256 -days 1024 -out itzgeekrootCA.pem
</code></pre>
<p>输入信息如下：</p>
<pre><code>You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:shenzhen
Locality Name (eg, city) [Default City]:shenzhen
Organization Name (eg, company) [Default Company Ltd]:ITzGeek
Organizational Unit Name (eg, section) []:IT Infra
Common Name (eg, your name or your server's hostname) []:ITzGeek Root CA
Email Address []:admin@itzgeek.com
</code></pre>
<p>LDAP服务端创建私钥</p>
<pre><code>openssl genrsa -out itzgeekldap.key 2048
</code></pre>
<p>有了私钥之后，就可以创建一个csr(certificate signing request)文件</p>
<pre><code>openssl req -new -key itzgeekldap.key -out itzgeekldap.csr
</code></pre>
<p>输出结果如下：</p>
<pre><code>You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:shenzhen
Locality Name (eg, city) [Default City]:shenzhen
Organization Name (eg, company) [Default Company Ltd]:ITzGeek
Organizational Unit Name (eg, section) []:IT Infra
Common Name (eg, your name or your server's hostname) []:server.itzgeek.local
Email Address []:admin@itzgeek.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>
<p>使用用户根CA签名一个CSR</p>
<pre><code>openssl x509 -req -in itzgeekldap.csr -CA itzgeekrootCA.pem -CAkey itzgeekrootCA.key -CAcreateserial -out itzgeekldap.crt -days 1460 -sha256
</code></pre>
<p>设置权限</p>
<pre><code>chown -R ldap:ldap /etc/openldap/certs/itzgeek*
</code></pre>
<p>查看证书文件</p>
<pre><code>-rw-r--r--. 1 ldap ldap 1334 Sep  7 11:23 /etc/openldap/certs/itzgeekldap.crt
-rw-r--r--. 1 ldap ldap 1074 Sep  7 11:22 /etc/openldap/certs/itzgeekldap.csr
-rw-r--r--. 1 ldap ldap 1675 Sep  7 11:20 /etc/openldap/certs/itzgeekldap.key
-rw-r--r--. 1 ldap ldap 1679 Sep  7 11:17 /etc/openldap/certs/itzgeekrootCA.key
-rw-r--r--. 1 ldap ldap 1444 Sep  7 11:18 /etc/openldap/certs/itzgeekrootCA.pem
-rw-r--r--. 1 ldap ldap   17 Sep  7 11:23 /etc/openldap/certs/itzgeekrootCA.srl
</code></pre>
<p>创建certs.ldif文件来配置LDAP</p>
<pre><code>vi certs.ldif
</code></pre>
<p>文件内容如下：</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcTLSCACertificateFile
olcTLSCACertificateFile: /etc/openldap/certs/itzgeekrootCA.pem
-
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/itzgeekldap.crt
-
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/itzgeekldap.key
</code></pre>
<p>应用配置文件</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f certs.ldif
</code></pre>
<p>输出如下：</p>
<pre><code>SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &quot;cn=config&quot;

</code></pre>
<h1 id="配置openldap-ssl">配置OpenLDAP SSL</h1>
<p>编辑<code>/etc/sysconfig/slapd</code>,增加<code>ldaps:///</code></p>
<pre><code>SLAPD_URLS=&quot;ldapi:/// ldap:/// ldaps:///&quot;
</code></pre>
<p>重启服务</p>
<pre><code>systemctl restart slapd
</code></pre>
<p>查看启动端口</p>
<pre><code>tcp    LISTEN     0      128       *:636                   *:*                   users:((&quot;slapd&quot;,pid=28160,fd=10))
tcp    LISTEN     0      128      :::636                  :::*                   users:((&quot;slapd&quot;,pid=28160,fd=11))
</code></pre>
<p>636是OpenLDAP ssl端口。</p>
<h1 id="openldap客户端配置ssl">OpenLDAP客户端配置SSL</h1>
<p>安装软件包</p>
<pre><code>yum install -y openldap-clients nss-pam-ldapd
</code></pre>
<p>执行<code>authconfig</code>命令将客户端机器注册到服务端</p>
<pre><code>authconfig --enableldap --enableldapauth --ldapserver=ldaps://server.itzgeek.local --ldapbasedn=&quot;dc=itzgeek,dc=local&quot; --enablemkhomedir --disableldaptls --update
</code></pre>
<h2 id="客户端配置">客户端配置</h2>
<p>编辑<code>nslcd.conf</code>配置文件</p>
<pre><code>	vi /etc/nslcd.conf
</code></pre>
<p>增加一行</p>
<pre><code>tls_reqcert allow
</code></pre>
<p>拷贝LDAP服务端的CA公钥到客户端的<code>/etc/openldap/cacerts</code>目录中</p>
<pre><code>cd /etc/openldap/cacerts/
scp -pr 192.168.33.11:/etc/openldap/certs/itzgeekrootCA.pem /etc/openldap/cacerts
</code></pre>
<p>为CA证书创建hash值</p>
<pre><code>/etc/pki/tls/misc/c_hash /etc/openldap/cacerts/itzgeekrootCA.pem
</code></pre>
<p>输出：</p>
<pre><code>1a981562.0 =&gt; /etc/openldap/cacerts/itzgeekrootCA.pem
</code></pre>
<p>创建一个软连接</p>
<pre><code>ln -s /etc/openldap/cacerts/itzgeekrootCA.pem 1a981562.0
</code></pre>
<p>重启LDAP客户端服务</p>
<pre><code>systemctl restart nslcd
</code></pre>
<h1 id="验证ldap登录">验证LDAP登录</h1>
<p>使用<code>getent</code>命令来获取LDAP服务端的条目</p>
<pre><code>getent passwd raj
</code></pre>
<p>输出：</p>
<pre><code>raj:x:9999:100:Raj [Admin (at) ITzGeek]:/home/raj:/bin/bash
</code></pre>
<p>登录：<br>
<img src="https://mrpingan.github.io/post-images/1567857602492.png" alt=""><br>
查看日志TLS建立成功<br>
<img src="https://mrpingan.github.io/post-images/1567858011786.png" alt=""></p>
<h1 id="错误记录">错误记录</h1>
<p>1、在应用证书配置的时候，报错</p>
<pre><code>replace olcTLSCertificateFile:
    /etc/apache2/ssl/od.censored.pl.crt
modifying entry &quot;cn=config&quot;
ldap_modify: Other (e.g., implementation specific) error (80)
</code></pre>
<p>我的解决方案，可能是证书目录权限配置问题，可通过<code>strace</code>分析具体报错</p>
<pre><code>strace ldapmodify -Y EXTERNAL -H ldapi:/// -vvv -f certs.ldif
</code></pre>
<p>ubuntu中配置权限</p>
<pre><code>chgrp openldap /etc/ssl/private/ldap01_slapd_key.pem
chmod 0640 /etc/ssl/private/ldap01_slapd_key.pem
gpasswd -a openldap ssl-cert
</code></pre>
<p>重启ldap</p>
<pre><code>systemctl restart slapd
</code></pre>
<p>然后再执行就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7/RHEL 7 LDAP 配置]]></title>
        <id>https://mrpingan.github.io/post/ldap-ssl-pei-zhi</id>
        <link href="https://mrpingan.github.io/post/ldap-ssl-pei-zhi">
        </link>
        <updated>2019-09-07T06:48:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="环境">环境</h1>
<table>
<thead>
<tr>
<th>hostname</th>
<th>ip</th>
<th>os</th>
<th>purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>server.itzgeek.local</td>
<td>192.168.33.11</td>
<td>centos 7</td>
<td>服务端</td>
</tr>
<tr>
<td>client.itzgeek.local</td>
<td>192.168.33.12</td>
<td>centos 7</td>
<td>客户端</td>
</tr>
</tbody>
</table>
<h1 id="要求">要求</h1>
<p>确认LDAP服务端server.itzgeek.local(192.168.33.11)和LDAP客户端client.itzgeek.local(192.168.33.12)都可以ping通<br>
保证每一台服务器的hosts文件中都包含</p>
<pre><code>192.168.33.12   client.itzgeek.local    client
192.168.33.11   server.itzgeek.local    server
</code></pre>
<h1 id="安装ldap包">安装LDAP包</h1>
<p>安装LDAP包，openldap-servers是服务端的包，openldap-clients是客户端<br>
<code>yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-servers-sql openldap-devel</code></p>
<h2 id="启动ldap-server并加入自启动">启动LDAP server并加入自启动</h2>
<pre><code>systemctl start slapd
systemctl enable slapd
</code></pre>
<p>查看LDAP是否启动</p>
<pre><code>ss -antup | grep -i 389
</code></pre>
<p>输出如下表示端口已启动</p>
<pre><code>tcp    LISTEN     0      128       *:389                   *:*                   users:((&quot;slapd&quot;,pid=5740,fd=8))
tcp    LISTEN     0      128      :::389                  :::*                   users:((&quot;slapd&quot;,pid=5740,fd=9))
</code></pre>
<h2 id="设置管理员密码">设置管理员密码</h2>
<p>生成ssha加密密码,比如这儿的密码为admin</p>
<pre><code>slappasswd -h {SSHA} -s admin
</code></pre>
<p>输出：</p>
<pre><code>{SSHA}nU4sM/uweUR3xhk1A521Fs5DlAO/gEbx
</code></pre>
<h2 id="配置ldap服务端">配置LDAP服务端</h2>
<p>OpenLDAP服务端配置文件放在<code>/etc/openldap/slapd.d/</code>。修改一下<code>olcSuffix</code>和<code>olcRootDN</code>变量。<br>
<code>olcSuffix</code>    ——   数据库后缀，它是LDAP服务器提供信息的域名。简单来说，它应该更改为域名。<br>
<code>olcRootDN</code> ——   一般指的是root用户，具有所有访问权限的用户<br>
<code>olcRootPW</code> ——  RootDN的密码</p>
<blockquote>
<p>以上的变量需要在<code>/etc/openldap/slapd.d/cn=config/olcDatabase={2}hdb.ldif</code>中更新，不建议手动修改这个文件，所有的变更都应该创建一个<code>.ldif</code>文件，使用ldap的命令去执行</p>
</blockquote>
<pre><code>vi db.ldif
</code></pre>
<p>添加下面的内容：</p>
<pre><code>dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=itzgeek,dc=local

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=admin,dc=itzgeek,dc=local

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: {SSHA}nU4sM/uweUR3xhk1A521Fs5DlAO/gEbx
</code></pre>
<p>把配置发送给服务端，不需重启即时生效</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f db.ldif
</code></pre>
<p>输出下面内容表示成功：</p>
<pre><code>SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &quot;olcDatabase={2}hdb,cn=config&quot;

modifying entry &quot;olcDatabase={2}hdb,cn=config&quot;

modifying entry &quot;olcDatabase={2}hdb,cn=config&quot;
</code></pre>
<p>刚才的文件中我们设置了basedn,rootdn,rootpassword，现在我们设置一下ACL权限</p>
<pre><code>vi monitor.ldif
</code></pre>
<p>使用下面的配置：</p>
<pre><code>dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external, cn=auth&quot; read by dn.base=&quot;cn=admin,dc=itzgeek,dc=local&quot; read by * none
</code></pre>
<p>同样的，也要发送配置给服务端</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f monitor.ldif
</code></pre>
<p>输出如下，表示成功：</p>
<pre><code>SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &quot;olcDatabase={1}monitor,cn=config&quot;
</code></pre>
<h1 id="设置ldap数据库">设置LDAP数据库</h1>
<p>拷贝数据库样本配置文件到<code>/var/lib/ldap</code>,更新文件权限</p>
<pre><code>cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
chown ldap:ldap /var/lib/ldap/*
</code></pre>
<p>增加inetorgperson LDAP schemas，但是inetorgperson依赖cosine和nis LDAP schemas，所以要先安装cosine和nis LDAP schemas</p>
<pre><code>ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif 
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif
</code></pre>
<p>配置基本结构配置文件base.ldif</p>
<pre><code>dn: dc=itzgeek,dc=local
dc: itzgeek
objectClass: top
objectClass: domain

dn: cn=admin ,dc=itzgeek,dc=local
objectClass: organizationalRole
cn: admin
description: LDAP Manager

dn: ou=People,dc=itzgeek,dc=local
objectClass: organizationalUnit
ou: People

dn: ou=Group,dc=itzgeek,dc=local
objectClass: organizationalUnit
ou: Group
</code></pre>
<p>生成目录结构：</p>
<pre><code>ldapadd -x -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; -f base.ldif
</code></pre>
<p>要输入<code>cn=admin,dc=itzgeek,dc=local</code>的密码才可以</p>
<p>输出内容：</p>
<pre><code>Enter LDAP Password:
adding new entry &quot;dc=itzgeek,dc=local&quot;

adding new entry &quot;cn=admin ,dc=itzgeek,dc=local&quot;

adding new entry &quot;ou=People,dc=itzgeek,dc=local&quot;

adding new entry &quot;ou=Group,dc=itzgeek,dc=local&quot;
</code></pre>
<p>使用<code>JXplorer</code>查看目录树<br>
<img src="https://mrpingan.github.io/post-images/1567842998859.png" alt=""></p>
<h1 id="创建ldap用户">创建LDAP用户</h1>
<pre><code>vi raj.ldif
</code></pre>
<p>写入以下内容：</p>
<pre><code>dn: uid=raj,ou=People,dc=itzgeek,dc=local
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: raj
uid: raj
uidNumber: 9999
gidNumber: 100
homeDirectory: /home/raj
loginShell: /bin/bash
gecos: Raj [Admin (at) ITzGeek]
userPassword: {crypt}x
shadowLastChange: 17058
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
</code></pre>
<p>把配置写入LDAP服务端</p>
<pre><code>ldapadd -x -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; -f raj.ldif
</code></pre>
<p>输出如下：</p>
<pre><code>Enter LDAP Password:
adding new entry &quot;uid=raj,ou=People,dc=itzgeek,dc=local&quot;
</code></pre>
<p>给<code>raj</code>用户设置一个密码</p>
<pre><code>ldappasswd -s password123 -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; -x &quot;uid=raj,ou=People,dc=itzgeek,dc=local&quot;
</code></pre>
<p>-s 给指定用户指定密码<br>
-x 指定配置密码用户<br>
-D 指定可以修改密码的dn<br>
验证<code>raj</code>用户：</p>
<pre><code>ldapsearch -x cn=raj -b dc=itzgeek,dc=local
</code></pre>
<p>输出如下：</p>
<pre><code># extended LDIF
#
# LDAPv3
# base &lt;dc=itzgeek,dc=local&gt; with scope subtree
# filter: cn=raj
# requesting: ALL
#

# raj, People, itzgeek.local
dn: uid=raj,ou=People,dc=itzgeek,dc=local
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: raj
uid: raj
uidNumber: 9999
gidNumber: 100
homeDirectory: /home/raj
loginShell: /bin/bash
gecos: Raj [Admin (at) ITzGeek]
shadowLastChange: 17058
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
userPassword:: e1NTSEF9SmwvcUZRSzAzRVV0dmZ0UXNPYU9zZjdvdWdDRGR2dlA=

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
</code></pre>
<p>删除一个条目：</p>
<pre><code>ldapdelete -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; &quot;uid=raj,ou=People,dc=itzgeek,dc=local&quot;
</code></pre>
<h1 id="防火墙">防火墙</h1>
<p>如果开启了防火墙，要在防火墙上开启端口TCP(389)</p>
<pre><code>firewall-cmd --permanent --add-service=ldap
firewall-cmd --reload
</code></pre>
<h1 id="开启ldap日志">开启LDAP日志</h1>
<p>pass</p>
<h1 id="ldap客户端配置">LDAP客户端配置</h1>
<p>在客户端机器上安装必要的包</p>
<pre><code>yum install -y openldap-clients nss-pam-ldapd
</code></pre>
<p>执行下面的命令将客户端注册到LDAP服务端上,192.168.33.11是LDAP服务端的IP地址</p>
<pre><code>authconfig --enableldap --enableldapauth --ldapserver=192.168.33.11 --ldapbasedn=&quot;dc=itzgeek,dc=local&quot; --enablemkhomedir --update
</code></pre>
<p>重启LDAP客户端服务</p>
<pre><code>systemctl restart  nslcd
</code></pre>
<h1 id="验证ldap登录">验证LDAP登录</h1>
<p>使用<code>getent</code>命令来从LDAP服务端获取条目</p>
<pre><code>getent passwd raj
</code></pre>
<p>输出：</p>
<pre><code>raj:x:9999:100:Raj [Admin (at) ITzGeek]:/home/raj:/bin/bash
</code></pre>
<p>为了验证，在客户端机器上使用LDAP用户<code>raj</code>登录</p>
<pre><code>ssh raj@192.168.33.12
</code></pre>
<p><img src="https://mrpingan.github.io/post-images/1567846300534.png" alt=""><br>
登录成功之后，就会创建一个家目录，由于我是第二次登录，所以看不到创建家目录的提示信息。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[confluence禁用忘记密码功能]]></title>
        <id>https://mrpingan.github.io/post/confluence-jin-yong-wang-ji-mi-ma-gong-neng</id>
        <link href="https://mrpingan.github.io/post/confluence-jin-yong-wang-ji-mi-ma-gong-neng">
        </link>
        <updated>2019-09-04T04:36:56.000Z</updated>
        <content type="html"><![CDATA[<p>禁用忘记密码功能很简单，只需要增加一个css就可以。<br>
使用管理员登录<br>
<img src="https://mrpingan.github.io/post-images/1567572057774.png" alt=""><br>
增加样式</p>
<pre><code>#forgot-password {
    display:none;
}
</code></pre>
<p>然后，在登录界面就看不到&quot;忘记密码&quot;的选项了 。其实只是在前端页面上隐藏了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[maven打包栈溢出的问题]]></title>
        <id>https://mrpingan.github.io/post/maven-da-bao-zhan-yi-chu-de-wen-ti</id>
        <link href="https://mrpingan.github.io/post/maven-da-bao-zhan-yi-chu-de-wen-ti">
        </link>
        <updated>2019-08-29T15:01:36.000Z</updated>
        <content type="html"><![CDATA[<p>今天使用<code>mvn</code>打包Java项目的时候，出现了栈溢出，部分错误日志如下：</p>
<pre><code>Exception in thread &quot;main&quot; java.lang.StackOverflowError
	at java.util.regex.Pattern$Branch.match(Pattern.java:4502)
	at java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
	at java.util.regex.Pattern$Loop.match(Pattern.java:4683)
	at java.util.regex.Pattern$GroupTail.match(Pattern.java:4615)
	at java.util.regex.Pattern$BranchConn.match(Pattern.java:4466)
	at java.util.regex.Pattern$CharProperty.match(Pattern.java:3694)
	at java.util.regex.Pattern$Branch.match(Pattern.java:4502)
	at java.util.regex.Pattern$GroupHead.match(Pattern.java:4556)
</code></pre>
<p>解决方法：<br>
调整<code>maven</code>的栈大小<br>
通过<code>which mvn</code>找到<code>mvn</code>命令</p>
<pre><code>root@saas3.0_jumper:~# which mvn
/usr/local/maven/bin/mvn
</code></pre>
<p>编辑<code>/usr/local/maven/bin/mvn</code>,在文件开头添加<code>MAVEN_OPTS</code>环境变量，</p>
<pre><code># -----------------------------------------------------------------------------
# Apache Maven Startup Script
#
# Environment Variable Prerequisites
#
#   JAVA_HOME       Must point at your Java Development Kit installation.
#   MAVEN_OPTS      (Optional) Java runtime options used when Maven is executed.
#   MAVEN_SKIP_RC   (Optional) Flag to disable loading of mavenrc files.
# -----------------------------------------------------------------------------
MAVEN_OPTS=&quot;-Xss10240k&quot;
</code></pre>
<p>再次打包，成功。如果这个值还是提示栈溢出的话，可以考虑继续调整Xss的大小，或者在代码层面找原因。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jenkins 连接ldap]]></title>
        <id>https://mrpingan.github.io/post/jenkins-lian-jie-ldap</id>
        <link href="https://mrpingan.github.io/post/jenkins-lian-jie-ldap">
        </link>
        <updated>2019-08-21T06:23:35.000Z</updated>
        <content type="html"><![CDATA[<p>jenkins默认安装了ldap插件，通过ldap可以对用户进行授权。相比本地账户而言，更加方便，更加好管理。当用户离职后，直接在ldap中将这个用户删掉就可以了。<br>
想要达到的目的：</p>
<ul>
<li>可以通过ldap用户认证</li>
<li>只有指定的组可以登录Jenkins，不同的组拥有的权限不同</li>
</ul>
<h3 id="ldap设置">ldap设置</h3>
<p>ldap中设置了两个组jenkins-admin、jenkins-user，分别用来在Jenkins中配置不同的权限的。<br>
<img src="https://mrpingan.github.io/post-images/1566377435268.png" alt=""><br>
所有的用户都存在于ou=People叶子中的节点，所有的组都存在于ou=Groups中的节点，比如这儿我就加了一个jenkins节点同样是ou对象，因为我还要在下面增加groupOfNames的组对象，这样的好处是groupOfNames可以增加成员<br>
<img src="https://mrpingan.github.io/post-images/1566377641597.png" alt=""><br>
比如，这儿我就增加了ou=People中的叶子节点</p>
<h3 id="jenkins设置">jenkins设置</h3>
<p>如果通过管理员账号登录jenkins，可以看到这个选项</p>
<p>接下来，选择<code>LDAP</code><br>
<img src="https://mrpingan.github.io/post-images/1566377699539.png" alt=""></p>
<p>填入配置，我的配置如下：<br>
<img src="https://mrpingan.github.io/post-images/1566377716964.png" alt=""><br>
填写完成后，可以验证一下<br>
<img src="https://mrpingan.github.io/post-images/1566377732941.png" alt=""></p>
<p><img src="https://mrpingan.github.io/post-images/1566377752076.png" alt=""><br>
注意这儿的用户名只需要填写<code>User search filter</code>填写cn的值即可，因为我的dn为：cn=pingqiangqiang,ou=People,dc=ping,dc=cn<br>
所以这儿需要填写 cn={0},如果你的dn为uid=pingqiangqiang,ou=People,dc=ping,dc=cn，则<code>User search filter</code>需要填写uid={0},然后通过pingqiangqiang去验证。如果需要通过邮箱验证，则<code>User search filter</code>需要填写mail={0}。</p>
<p><img src="https://mrpingan.github.io/post-images/1566377766023.png" alt=""><br>
如果测试通过，则会显示Authentication: successful之类的信息。</p>
<h4 id="jenkins配置权限">Jenkins配置权限</h4>
<p>还记得我们之前创建的两个组么，jenkins-admin、jenkins-user<br>
在我的ldap中，cn=pingqiangqiang 这个用户属于 jenkins-admin组，cn=test 用户属于 jenkins-user 组<br>
把页面下拉，可以看到 授权策略 现象，点击 安全矩阵 ，然后就可以添加对应的组来对不同的组来授权，组内的成员也会继承组的权限。<br>
<img src="https://mrpingan.github.io/post-images/1566377786644.png" alt=""></p>
]]></content>
    </entry>
</feed>