<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrpingan.github.io</id>
    <title>Ping&apos;s Home</title>
    <updated>2019-11-08T05:12:21.825Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrpingan.github.io"/>
    <link rel="self" href="https://mrpingan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mrpingan.github.io/images/avatar.png</logo>
    <icon>https://mrpingan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Ping&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[openldap 配置mirrormode]]></title>
        <id>https://mrpingan.github.io/post/openldap-pei-zhi-mirrormode</id>
        <link href="https://mrpingan.github.io/post/openldap-pei-zhi-mirrormode">
        </link>
        <updated>2019-11-08T03:28:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>MirrorMode 模式镜像同步模式，而且主服务器互相以推的方式实现目录树条目同步，最多允许且两台机器为主服务器。如果要添加更多节点，此时只能添加多台从服务器，而不能将添加的节点配置为主服务器</p>
<h1 id="准备">准备</h1>
<table>
<thead>
<tr>
<th>用途</th>
<th>IP</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>provider1</td>
<td>192.168.33.10</td>
<td></td>
</tr>
<tr>
<td>provider2</td>
<td>192.168.33.11</td>
<td></td>
</tr>
</tbody>
</table>
<p>两台服务器互为主备，但是只能在一个provider上写。</p>
<h1 id="安装ldap">安装ldap</h1>
<pre><code>apt install slapd ldap-utils

#重新配置
dpkg-reconfigure slapd
</code></pre>
<p>dn: dc=ping,dc=cn<br>
管理员密码：admin</p>
<p>两台服务器的DIT要保持一致</p>
<h1 id="开启日志如果已开启可忽略">开启日志(如果已开启可忽略)</h1>
<p>log.ldif文件内容如下：</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: stats sync
</code></pre>
<p>应用配置：</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f log.ldif
</code></pre>
<h1 id="加载syncprov模块">加载syncprov模块</h1>
<p>sync.ldif文件如下：</p>
<pre><code>dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: syncprov.la

dn: olcOverlay=syncprov,olcDatabase={1}hdb,cn=config
changetype: add
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpCheckpoint: 100 10
olcSpSessionLog: 100
</code></pre>
<p>注意：</p>
<ul>
<li>指定的dn存在</li>
<li>指定的Database要存在</li>
<li>模块文件存在，ubuntu 的模块目录一般在<code>/usr/lib/ldap</code>目录下,如果在其他目录下，可通过<code>olcModulePath</code>指定目录，也可查看<code>cn=module{0}.ldif</code>文件<code>olcModulePath</code>是否被指定</li>
</ul>
<p>应用配置：</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f sync.ldif
</code></pre>
<h1 id="配置mirror模式">配置mirror模式</h1>
<p>master01.ldif文件内容如下：<br>
master01的ip地址为: <code>192.168.33.10</code></p>
<pre><code>dn: cn=config
changetype: modify
replace: olcServerID
olcServerID: 1

dn: olcDatabase={1}hdb,cn=config
changetype: modify
replace: olcSyncRepl
olcSyncRepl: rid=001
             provider=ldap://192.168.33.11:389
             bindmethod=simple
             binddn=&quot;cn=admin,dc=ping,dc=cn&quot;
             credentials=admin
             searchbase=&quot;dc=ping,dc=cn&quot;
             filter=&quot;(objectClass=*)&quot;
             scope=sub
             schemachecking=off
             attrs=&quot;*,+&quot;
             type=refreshAndPersist
             retry=&quot;5 5 300 +&quot;
             interval=00:00:01:00
-
add: olcMirrorMode
olcMirrorMode: TRUE
-
add: olcDbIndex
olcDbIndex: entryUUID eq
-
add: olcDbIndex
olcDbIndex: entryCSN eq
</code></pre>
<p>注意：</p>
<ul>
<li>此处的<code>provider</code>指定的另一台服务器的ip</li>
<li><code>rid</code>要保持一致</li>
<li><code>olcServerID</code>要区分</li>
</ul>
<p>应用配置：</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f master01.ldif
</code></pre>
<p>master02.ldif文件内容如下：</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcServerID
olcServerID: 2

dn: olcDatabase={1}hdb,cn=config
changetype: modify
replace: olcSyncRepl
olcSyncRepl: rid=001
             provider=ldap://192.168.33.10:389
             bindmethod=simple
             binddn=&quot;cn=admin,dc=ping,dc=cn&quot;
             credentials=admin
             searchbase=&quot;dc=ping,dc=cn&quot;
             filter=&quot;(objectClass=*)&quot;
             scope=sub
             schemachecking=off
             attrs=&quot;*,+&quot;
             type=refreshAndPersist
             retry=&quot;5 5 300 +&quot;
             interval=00:00:01:00
-
add: olcMirrorMode
olcMirrorMode: TRUE
-
add: olcDbIndex
olcDbIndex: entryUUID eq
-
add: olcDbIndex
olcDbIndex: entryCSN eq
</code></pre>
<p>应用配置:</p>
<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// -f master02.ldif
</code></pre>
<h1 id="验证">验证</h1>
<p>1、查看日志：<br>
<img src="https://mrpingan.github.io/post-images/1573189656518.png" alt=""><br>
并未看到任何错误</p>
<p>2、添加用户<br>
在master01上添加用户，看master02上是否被同步</p>
<p>验证通过！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ubuntu14安装FPM]]></title>
        <id>https://mrpingan.github.io/post/ubuntu14-an-zhuang-fpm</id>
        <link href="https://mrpingan.github.io/post/ubuntu14-an-zhuang-fpm">
        </link>
        <updated>2019-09-16T08:43:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>不同的linux发行版都有不同的包管理工具。例如，Fedora和Redhat都使用<code>.rpm</code>格式的包，Debian和Ubuntu使用<code>.deb</code>格式的包。这些包是不兼容的，而且要熟悉创建不同包的方式也很费时间。<br>
为了最小化创建包的复杂度，我们可以使用<code>fpm</code>工具。使用<code>fpm</code>,你可以很容易的同时创建<code>.rpm</code>和<code>.deb</code>文件。是不是很酷！下面在<code>ubuntu 14</code>的环境演示。</p>
<h1 id="安装fpm">安装fpm</h1>
<p>fpm是ruby语言写的工具，所以要安装ruby环境</p>
<pre><code>apt-get update
apt-get install ruby-dev build-essential
</code></pre>
<p>查看ruby版本，如果版本低于2.0，安装fpm1.11.0的过程中将会报错</p>
<pre><code>ruby -v
</code></pre>
<p>安装fpm</p>
<pre><code>gem install fpm
</code></pre>
<p>安装完成后，检验fpm</p>
<pre><code>fpm -help
</code></pre>
<pre><code>Intro:

  This is fpm version 1.11.0

  If you think something is wrong, it's probably a bug! :)
  Please file these here: https://github.com/jordansissel/fpm/issues

  You can find support on irc (#fpm on freenode irc) or via email with
  fpm-users@googlegroups.com

Loaded package types:
...
</code></pre>
<h2 id="如果ruby版本低于20">如果ruby版本低于2.0</h2>
<p>如果ruby版本低于2.0，需要安装高版本ruby。我们使用<code>rvm</code>工具去安装ruby高版本</p>
<h3 id="安装rvm">安装rvm</h3>
<p>参考rvm地址：<a href="http://rvm.io/">rvm官网</a><br>
安装gpg2命令</p>
<pre><code>apt-get install gnupg2
</code></pre>
<p>安装GPG 2公钥</p>
<pre><code>gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
</code></pre>
<p>安装rvm</p>
<pre><code>\curl -sSL https://get.rvm.io | bash -s stable
</code></pre>
<p>输出如下：</p>
<pre><code>Downloading https://github.com/rvm/rvm/archive/1.29.9.tar.gz
Downloading https://github.com/rvm/rvm/releases/download/1.29.9/1.29.9.tar.gz.asc
gpg: Signature made Wed 10 Jul 2019 08:31:02 AM UTC using RSA key ID 39499BDB
gpg: Good signature from &quot;Piotr Kuczynski &lt;piotr.kuczynski@gmail.com&gt;&quot;
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 7D2B AF1C F37B 13E2 069D  6956 105B D0E7 3949 9BDB
GPG verified '/usr/local/rvm/archives/rvm-1.29.9.tgz'
Creating group 'rvm'
Installing RVM to /usr/local/rvm/
Installation of RVM in /usr/local/rvm/ is almost complete:

  * First you need to add all users that will be using rvm to 'rvm' group,
    and logout - login again, anyone using rvm will be operating with `umask u=rwx,g=rwx,o=rx`.

  * To start using RVM you need to run `source /etc/profile.d/rvm.sh`
    in all your open shell windows, in rare cases you need to reopen all shell windows.
  * Please do NOT forget to add your users to the rvm group.
     The installer no longer auto-adds root or users to the rvm group. Admins must do this.
     Also, please note that group memberships are ONLY evaluated at login time.
     This means that users must log out then back in before group membership takes effect!
Thanks for installing RVM 🙏
Please consider donating to our open collective to help us maintain RVM.

👉  Donate: https://opencollective.com/rvm/donate
</code></pre>
<p>加载环境变量</p>
<pre><code>source /usr/local/rvm/scripts/rvm
</code></pre>
<p>现在可以使用rvm命令了,查看可安装的ruby版本</p>
<pre><code>rvm list known
</code></pre>
<p>安装ruby 2.3</p>
<pre><code>rvm install 2.3
</code></pre>
<p>再通过<code>ruby -v</code>查看版本是否变为2.3</p>
<h1 id="熟悉fpm基本功能">熟悉fpm基本功能</h1>
<p>fpm 命令行的基本格式</p>
<pre><code>fpm -s source_type -t target_type source_name_or_location
</code></pre>
<h2 id="把一个gem包转变为deb包">把一个gem包转变为deb包</h2>
<p>bundler是一个常见的gem包</p>
<pre><code>fpm -s gem -t deb bundler
</code></pre>
<pre><code>Debian packaging tools generally labels all files in /etc as config files, as mandated by policy, so fpm defaults to this behavior for deb packages. You can disable this default behavior with --deb-no-default-config-files flag {:level=&gt;:warn}
Created package {:path=&gt;&quot;rubygem-bundler_2.0.2_all.deb&quot;}
</code></pre>
<p>再当前目录就可以看到生成了<code>rubygem-bundler_2.0.2_all.deb</code>安装包<br>
看看安装会不会有问题<br>
查看当前的gem列表</p>
<pre><code>root@client:~# gem list

*** LOCAL GEMS ***

arr-pm (0.0.10)
backports (3.15.0)
bigdecimal (default: 1.2.8)
bundler (default: 1.16.2)
bundler-unload (1.0.2)
cabin (0.9.0)
childprocess (0.9.0)
clamp (1.0.1)
did_you_mean (1.0.0)
dotenv (2.7.5)
executable-hooks (1.5.0)
ffi (1.11.1)
fpm (1.11.0)
gem-wrappers (1.4.0)
insist (1.0.0)
io-console (default: 0.4.5)
io-like (0.3.0)
...
</code></pre>
<p>可以看到bundler的版本是1.16.2，我们打包的版本是2.0.2<br>
安装bundler</p>
<pre><code>dpkg -i rubygem-bundler_2.0.2_all.deb
</code></pre>
<p>再次查看gem安装列表</p>
<pre><code>root@client:~# gem list

*** LOCAL GEMS ***

arr-pm (0.0.10)
backports (3.15.0)
bigdecimal (default: 1.2.8)
bundler (2.0.2, default: 1.16.2)
bundler-unload (1.0.2)
cabin (0.9.0)
childprocess (0.9.0)
clamp (1.0.1)
did_you_mean (1.0.0)
dotenv (2.7.5)
executable-hooks (1.5.0)
ffi (1.11.1)
fpm (1.11.0)
...
</code></pre>
<p>看到bundler的版本变为2.0.2了。<br>
这是把gem包转变为deb包，属于包类型之间的转换</p>
<h1 id="源格式和目标格式">源格式和目标格式</h1>
<p>fpm支持下面的源格式:<br>
dir、tar、gem、python、pear、cpan、zip、npm、osxpkg、empty、deb、rpm</p>
<p>支持的目标格式：<br>
deb、rpm、zip、tar、dir、sh、osxpkg、solaris、pkgin、puppet</p>
<p><img src="https://mrpingan.github.io/post-images/1568727162483.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[查看发行版版本]]></title>
        <id>https://mrpingan.github.io/post/cha-kan-fa-xing-ban-ban-ben</id>
        <link href="https://mrpingan.github.io/post/cha-kan-fa-xing-ban-ban-ben">
        </link>
        <updated>2019-09-16T08:25:02.000Z</updated>
        <content type="html"><![CDATA[<p>在centos和ubuntu上都可以通过这条命令查看版本</p>
<pre><code>cat /etc/*-release
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jumpserver 连接ldap]]></title>
        <id>https://mrpingan.github.io/post/jumpserver-lian-jie-ldap</id>
        <link href="https://mrpingan.github.io/post/jumpserver-lian-jie-ldap">
        </link>
        <updated>2019-09-15T12:57:20.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://mrpingan.github.io/post-images/1568552305999.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[confluence用户数据迁移]]></title>
        <id>https://mrpingan.github.io/post/confluence-yong-hu-shu-ju-qian-yi</id>
        <link href="https://mrpingan.github.io/post/confluence-yong-hu-shu-ju-qian-yi">
        </link>
        <updated>2019-09-10T09:45:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="环境">环境</h1>
<p>1、confluence版本：6.15.8<br>
2、老账号：pingqiangqiang，组：ops，post：This My first Post<br>
3、新账号：ping，组：none，post，无<br>
4、达到目标：新账号：ping，组：ops，post：This My first Post</p>
<h1 id="方案一">方案一</h1>
<ul>
<li>调整用户目录顺序,并禁用LDAP用户目录</li>
</ul>
<p><img src="https://mrpingan.github.io/post-images/1568116514235.png" alt=""><br>
此时，confluence读取的用户数据都是本地目录数据，查看文档<br>
<img src="https://mrpingan.github.io/post-images/1568116630879.png" alt=""><br>
post的发布者还是老账号</p>
<ul>
<li>修改老账号的用户名为ping，并启动LDAP用户目录，调整用户目录顺序</li>
</ul>
<p><img src="https://mrpingan.github.io/post-images/1568116799748.png" alt=""><br>
此时，查看文档<br>
<img src="https://mrpingan.github.io/post-images/1568116820884.png" alt=""><br>
post的发布者变成了新账号中的可见名<br>
查看用户列表<br>
<img src="https://mrpingan.github.io/post-images/1568116892133.png" alt=""><br>
只有两个账号，老账号改了名字后，由于登录的时候，LDAP目录排在第一个，wiki先在LDAP中找到<code>ping</code>这个用户，于是认证成功可以登录。<br>
查看所属组<br>
<img src="https://mrpingan.github.io/post-images/1568117006765.png" alt=""><br>
发现直接继承了老账号<code>ping</code>的所属组。这是因为，在LDAP配置中，我们没有使用LDAP里面的目录结构。组都在wiki中授权，而且，wiki把用户名当唯一标识符，所以任务两个账号是同一个账号。<br>
目前测试，这种方案可行。</p>
<h1 id="方案二">方案二</h1>
<p>可参考连接：https://confluence.atlassian.com/confkb/how-to-merge-two-users-content-ownership-and-permissions-in-confluence-957149073.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[confluence连接ldaps]]></title>
        <id>https://mrpingan.github.io/post/confluence-lian-jie-ldaps</id>
        <link href="https://mrpingan.github.io/post/confluence-lian-jie-ldaps">
        </link>
        <updated>2019-09-10T04:22:51.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://mrpingan.github.io/post-images/1568089430883.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LDAP ubuntu phpldapadmin]]></title>
        <id>https://mrpingan.github.io/post/ldap-ubuntu-phpldapadmin</id>
        <link href="https://mrpingan.github.io/post/ldap-ubuntu-phpldapadmin">
        </link>
        <updated>2019-09-08T05:54:11.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-openldap-and-phpldapadmin-on-an-ubuntu-14-04-server</p>
<h1 id="phpldapadmin连接ldaps">phpldapadmin连接ldaps</h1>
<p>这儿的ssl证书是第三方授权的证书，phpldapadmin的配置文件如下</p>
<pre><code class="language-php">$servers-&gt;setValue('server','name','My LDAP Server');
$servers-&gt;setValue('server','host','ldaps://test-ldap.ping.net/');
$servers-&gt;setValue('server','port',636);
$servers-&gt;setValue('server','base',array('dc=ping,dc=net'));
$servers-&gt;setValue('login','auth_type','session');
$servers-&gt;setValue('login','bind_id','cn=admin,dc=ping,dc=net');
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jxplorer连接LDAP]]></title>
        <id>https://mrpingan.github.io/post/jxplorer-lian-jie-ldap</id>
        <link href="https://mrpingan.github.io/post/jxplorer-lian-jie-ldap">
        </link>
        <updated>2019-09-08T05:20:46.000Z</updated>
        <content type="html"><![CDATA[<p><code>Jxplorer</code>是JAVA连接LDAP的客户端，支持多种连接SSL、SASL，同时也支持很多平台。官网下载地址：http://jxplorer.org/downloads/users.html。</p>
<h1 id="非安全连接">非安全连接</h1>
<p>如果LDAP服务端未开启TLS，此时建立的连接是非安全连接，使用的端口是389.<br>
<img src="https://mrpingan.github.io/post-images/1567920506007.png" alt=""><br>
填写对应的信息，就可以连接上了</p>
<h1 id="安全连接">安全连接</h1>
<p>LDAP使用的是SSL，即重新开启一个SSL端口来建立安全通道，不过这种方式已经被淘汰。取而代之的是STARTTLS，这种方式和389复用同一个通道，不过传输的数据都是加密的。<br>
我这儿使用的是SSL，而且使用的自签名CA证书。并未使用STARTTLS。</p>
<h2 id="导入ca证书">导入CA证书</h2>
<p>选择&quot;安全&quot; —— &quot;信任的服务器及CA&quot;<br>
<img src="https://mrpingan.github.io/post-images/1567920720636.png" alt=""><br>
选择&quot;新增凭证&quot;<br>
<img src="https://mrpingan.github.io/post-images/1567920784200.png" alt=""><br>
选择指定的CA证书，并为CA证书指定一个名称<br>
<img src="https://mrpingan.github.io/post-images/1567920819137.png" alt=""><br>
还需要输入一个密码，默认的密码是&quot;changeit&quot;<br>
<img src="https://mrpingan.github.io/post-images/1567920864163.png" alt=""><br>
点击&quot;确认&quot;之后就可以正常导入了</p>
<p>新建一个连接<br>
<img src="https://mrpingan.github.io/post-images/1567920948221.png" alt=""><br>
填写对应的信息，ssl的方式需要修改端口为636。如果LDAP使用的是STARTTLS的方式，则端口依然是389。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 7/RHEL 7配置OpenLDAP SSL]]></title>
        <id>https://mrpingan.github.io/post/centos-7rhel-7-pei-zhi-openldap-ssl</id>
        <link href="https://mrpingan.github.io/post/centos-7rhel-7-pei-zhi-openldap-ssl">
        </link>
        <updated>2019-09-07T09:01:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="预先准备">预先准备</h1>
<p>在<code>/etc/hosts</code>中添加一条LDAP服务端主机域名映射记录</p>
<pre><code>192.168.33.11 server.itzgeek.local server
</code></pre>
<h1 id="创建-ldap-证书">创建 LDAP 证书</h1>
<h2 id="自签名证书">自签名证书</h2>
<p>为LDAP服务端创建一个自签名证书,下面的命令将会在<code>/etc/openldap/certs/</code>生成证书和私钥</p>
<pre><code>openssl req -new -x509 -nodes -out /etc/openldap/certs/itzgeekldap.crt -keyout /etc/openldap/certs/itzgeekldap.key -days 1460
</code></pre>
<p>输出内容：</p>
<pre><code>Generating a 2048 bit RSA private key
.................................................................................+++
...................................+++
writing new private key to '/etc/openldap/certs/itzgeekldap.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:shenzhen
Locality Name (eg, city) [Default City]:shenzhen
Organization Name (eg, company) [Default Company Ltd]:ITzGeek
Organizational Unit Name (eg, section) []:IT Infra
Common Name (eg, your name or your server's hostname) []:server.itzgeek.local
Email Address []:admin@itzgeek.com
</code></pre>
<p>设置权限</p>
<pre><code>chown -R ldap:ldap /etc/openldap/certs/itzgeek*
</code></pre>
<p>查看创建的证书和私钥</p>
<pre><code>[root@server openldap]# ll /etc/openldap/certs/itz*
-rw-r--r--. 1 root root 1456 Sep  7 09:08 /etc/openldap/certs/itzgeekldap.crt
-rw-r--r--. 1 root root 1704 Sep  7 09:08 /etc/openldap/certs/itzgeekldap.key
</code></pre>
<p>创建<code>certs.ldif</code>配置LDAP使用自签名证书</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/itzgeekldap.crt
-
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/itzgeekldap.key
</code></pre>
<p>刷新配置：</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f certs.ldif
</code></pre>
<p>验证配置：</p>
<pre><code>slaptest -u
</code></pre>
<p>配置正确显示如下：</p>
<pre><code>config file testing succeeded
</code></pre>
<h1 id="自定义ca签名证书">自定义CA签名证书</h1>
<p>创建根私钥</p>
<pre><code>cd  /etc/openldap/certs/
openssl genrsa -out itzgeekrootCA.key 2048
</code></pre>
<p>创建自签名根证书</p>
<pre><code>openssl req -x509 -new -nodes -key itzgeekrootCA.key -sha256 -days 1024 -out itzgeekrootCA.pem
</code></pre>
<p>输入信息如下：</p>
<pre><code>You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:shenzhen
Locality Name (eg, city) [Default City]:shenzhen
Organization Name (eg, company) [Default Company Ltd]:ITzGeek
Organizational Unit Name (eg, section) []:IT Infra
Common Name (eg, your name or your server's hostname) []:ITzGeek Root CA
Email Address []:admin@itzgeek.com
</code></pre>
<p>LDAP服务端创建私钥</p>
<pre><code>openssl genrsa -out itzgeekldap.key 2048
</code></pre>
<p>有了私钥之后，就可以创建一个csr(certificate signing request)文件</p>
<pre><code>openssl req -new -key itzgeekldap.key -out itzgeekldap.csr
</code></pre>
<p>输出结果如下：</p>
<pre><code>You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:shenzhen
Locality Name (eg, city) [Default City]:shenzhen
Organization Name (eg, company) [Default Company Ltd]:ITzGeek
Organizational Unit Name (eg, section) []:IT Infra
Common Name (eg, your name or your server's hostname) []:server.itzgeek.local
Email Address []:admin@itzgeek.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>
<p>使用用户根CA签名一个CSR</p>
<pre><code>openssl x509 -req -in itzgeekldap.csr -CA itzgeekrootCA.pem -CAkey itzgeekrootCA.key -CAcreateserial -out itzgeekldap.crt -days 1460 -sha256
</code></pre>
<p>设置权限</p>
<pre><code>chown -R ldap:ldap /etc/openldap/certs/itzgeek*
</code></pre>
<p>查看证书文件</p>
<pre><code>-rw-r--r--. 1 ldap ldap 1334 Sep  7 11:23 /etc/openldap/certs/itzgeekldap.crt
-rw-r--r--. 1 ldap ldap 1074 Sep  7 11:22 /etc/openldap/certs/itzgeekldap.csr
-rw-r--r--. 1 ldap ldap 1675 Sep  7 11:20 /etc/openldap/certs/itzgeekldap.key
-rw-r--r--. 1 ldap ldap 1679 Sep  7 11:17 /etc/openldap/certs/itzgeekrootCA.key
-rw-r--r--. 1 ldap ldap 1444 Sep  7 11:18 /etc/openldap/certs/itzgeekrootCA.pem
-rw-r--r--. 1 ldap ldap   17 Sep  7 11:23 /etc/openldap/certs/itzgeekrootCA.srl
</code></pre>
<p>创建certs.ldif文件来配置LDAP</p>
<pre><code>vi certs.ldif
</code></pre>
<p>文件内容如下：</p>
<pre><code>dn: cn=config
changetype: modify
replace: olcTLSCACertificateFile
olcTLSCACertificateFile: /etc/openldap/certs/itzgeekrootCA.pem
-
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/itzgeekldap.crt
-
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/itzgeekldap.key
</code></pre>
<p>应用配置文件</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f certs.ldif
</code></pre>
<p>输出如下：</p>
<pre><code>SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &quot;cn=config&quot;

</code></pre>
<h1 id="配置openldap-ssl">配置OpenLDAP SSL</h1>
<p>编辑<code>/etc/sysconfig/slapd</code>,增加<code>ldaps:///</code></p>
<pre><code>SLAPD_URLS=&quot;ldapi:/// ldap:/// ldaps:///&quot;
</code></pre>
<p>重启服务</p>
<pre><code>systemctl restart slapd
</code></pre>
<p>查看启动端口</p>
<pre><code>tcp    LISTEN     0      128       *:636                   *:*                   users:((&quot;slapd&quot;,pid=28160,fd=10))
tcp    LISTEN     0      128      :::636                  :::*                   users:((&quot;slapd&quot;,pid=28160,fd=11))
</code></pre>
<p>636是OpenLDAP ssl端口。</p>
<h1 id="openldap客户端配置ssl">OpenLDAP客户端配置SSL</h1>
<p>安装软件包</p>
<pre><code>yum install -y openldap-clients nss-pam-ldapd
</code></pre>
<p>执行<code>authconfig</code>命令将客户端机器注册到服务端</p>
<pre><code>authconfig --enableldap --enableldapauth --ldapserver=ldaps://server.itzgeek.local --ldapbasedn=&quot;dc=itzgeek,dc=local&quot; --enablemkhomedir --disableldaptls --update
</code></pre>
<h2 id="客户端配置">客户端配置</h2>
<p>编辑<code>nslcd.conf</code>配置文件</p>
<pre><code>	vi /etc/nslcd.conf
</code></pre>
<p>增加一行</p>
<pre><code>tls_reqcert allow
</code></pre>
<p>拷贝LDAP服务端的CA公钥到客户端的<code>/etc/openldap/cacerts</code>目录中</p>
<pre><code>cd /etc/openldap/cacerts/
scp -pr 192.168.33.11:/etc/openldap/certs/itzgeekrootCA.pem /etc/openldap/cacerts
</code></pre>
<p>为CA证书创建hash值</p>
<pre><code>/etc/pki/tls/misc/c_hash /etc/openldap/cacerts/itzgeekrootCA.pem
</code></pre>
<p>输出：</p>
<pre><code>1a981562.0 =&gt; /etc/openldap/cacerts/itzgeekrootCA.pem
</code></pre>
<p>创建一个软连接</p>
<pre><code>ln -s /etc/openldap/cacerts/itzgeekrootCA.pem 1a981562.0
</code></pre>
<p>重启LDAP客户端服务</p>
<pre><code>systemctl restart nslcd
</code></pre>
<h1 id="验证ldap登录">验证LDAP登录</h1>
<p>使用<code>getent</code>命令来获取LDAP服务端的条目</p>
<pre><code>getent passwd raj
</code></pre>
<p>输出：</p>
<pre><code>raj:x:9999:100:Raj [Admin (at) ITzGeek]:/home/raj:/bin/bash
</code></pre>
<p>登录：<br>
<img src="https://mrpingan.github.io/post-images/1567857602492.png" alt=""><br>
查看日志TLS建立成功<br>
<img src="https://mrpingan.github.io/post-images/1567858011786.png" alt=""></p>
<h1 id="错误记录">错误记录</h1>
<p>1、在应用证书配置的时候，报错</p>
<pre><code>replace olcTLSCertificateFile:
    /etc/apache2/ssl/od.censored.pl.crt
modifying entry &quot;cn=config&quot;
ldap_modify: Other (e.g., implementation specific) error (80)
</code></pre>
<p>我的解决方案，可能是证书目录权限配置问题，可通过<code>strace</code>分析具体报错</p>
<pre><code>strace ldapmodify -Y EXTERNAL -H ldapi:/// -vvv -f certs.ldif
</code></pre>
<p>ubuntu中配置权限</p>
<pre><code>chgrp openldap /etc/ssl/private/ldap01_slapd_key.pem
chmod 0640 /etc/ssl/private/ldap01_slapd_key.pem
gpasswd -a openldap ssl-cert
</code></pre>
<p>重启ldap</p>
<pre><code>systemctl restart slapd
</code></pre>
<p>然后再执行就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7/RHEL 7 LDAP 配置]]></title>
        <id>https://mrpingan.github.io/post/ldap-ssl-pei-zhi</id>
        <link href="https://mrpingan.github.io/post/ldap-ssl-pei-zhi">
        </link>
        <updated>2019-09-07T06:48:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="环境">环境</h1>
<table>
<thead>
<tr>
<th>hostname</th>
<th>ip</th>
<th>os</th>
<th>purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>server.itzgeek.local</td>
<td>192.168.33.11</td>
<td>centos 7</td>
<td>服务端</td>
</tr>
<tr>
<td>client.itzgeek.local</td>
<td>192.168.33.12</td>
<td>centos 7</td>
<td>客户端</td>
</tr>
</tbody>
</table>
<h1 id="要求">要求</h1>
<p>确认LDAP服务端server.itzgeek.local(192.168.33.11)和LDAP客户端client.itzgeek.local(192.168.33.12)都可以ping通<br>
保证每一台服务器的hosts文件中都包含</p>
<pre><code>192.168.33.12   client.itzgeek.local    client
192.168.33.11   server.itzgeek.local    server
</code></pre>
<h1 id="安装ldap包">安装LDAP包</h1>
<p>安装LDAP包，openldap-servers是服务端的包，openldap-clients是客户端<br>
<code>yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-servers-sql openldap-devel</code></p>
<h2 id="启动ldap-server并加入自启动">启动LDAP server并加入自启动</h2>
<pre><code>systemctl start slapd
systemctl enable slapd
</code></pre>
<p>查看LDAP是否启动</p>
<pre><code>ss -antup | grep -i 389
</code></pre>
<p>输出如下表示端口已启动</p>
<pre><code>tcp    LISTEN     0      128       *:389                   *:*                   users:((&quot;slapd&quot;,pid=5740,fd=8))
tcp    LISTEN     0      128      :::389                  :::*                   users:((&quot;slapd&quot;,pid=5740,fd=9))
</code></pre>
<h2 id="设置管理员密码">设置管理员密码</h2>
<p>生成ssha加密密码,比如这儿的密码为admin</p>
<pre><code>slappasswd -h {SSHA} -s admin
</code></pre>
<p>输出：</p>
<pre><code>{SSHA}nU4sM/uweUR3xhk1A521Fs5DlAO/gEbx
</code></pre>
<h2 id="配置ldap服务端">配置LDAP服务端</h2>
<p>OpenLDAP服务端配置文件放在<code>/etc/openldap/slapd.d/</code>。修改一下<code>olcSuffix</code>和<code>olcRootDN</code>变量。<br>
<code>olcSuffix</code>    ——   数据库后缀，它是LDAP服务器提供信息的域名。简单来说，它应该更改为域名。<br>
<code>olcRootDN</code> ——   一般指的是root用户，具有所有访问权限的用户<br>
<code>olcRootPW</code> ——  RootDN的密码</p>
<blockquote>
<p>以上的变量需要在<code>/etc/openldap/slapd.d/cn=config/olcDatabase={2}hdb.ldif</code>中更新，不建议手动修改这个文件，所有的变更都应该创建一个<code>.ldif</code>文件，使用ldap的命令去执行</p>
</blockquote>
<pre><code>vi db.ldif
</code></pre>
<p>添加下面的内容：</p>
<pre><code>dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=itzgeek,dc=local

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=admin,dc=itzgeek,dc=local

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: {SSHA}nU4sM/uweUR3xhk1A521Fs5DlAO/gEbx
</code></pre>
<p>把配置发送给服务端，不需重启即时生效</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f db.ldif
</code></pre>
<p>输出下面内容表示成功：</p>
<pre><code>SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &quot;olcDatabase={2}hdb,cn=config&quot;

modifying entry &quot;olcDatabase={2}hdb,cn=config&quot;

modifying entry &quot;olcDatabase={2}hdb,cn=config&quot;
</code></pre>
<p>刚才的文件中我们设置了basedn,rootdn,rootpassword，现在我们设置一下ACL权限</p>
<pre><code>vi monitor.ldif
</code></pre>
<p>使用下面的配置：</p>
<pre><code>dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external, cn=auth&quot; read by dn.base=&quot;cn=admin,dc=itzgeek,dc=local&quot; read by * none
</code></pre>
<p>同样的，也要发送配置给服务端</p>
<pre><code>ldapmodify -Y EXTERNAL  -H ldapi:/// -f monitor.ldif
</code></pre>
<p>输出如下，表示成功：</p>
<pre><code>SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry &quot;olcDatabase={1}monitor,cn=config&quot;
</code></pre>
<h1 id="设置ldap数据库">设置LDAP数据库</h1>
<p>拷贝数据库样本配置文件到<code>/var/lib/ldap</code>,更新文件权限</p>
<pre><code>cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
chown ldap:ldap /var/lib/ldap/*
</code></pre>
<p>增加inetorgperson LDAP schemas，但是inetorgperson依赖cosine和nis LDAP schemas，所以要先安装cosine和nis LDAP schemas</p>
<pre><code>ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif 
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif
</code></pre>
<p>配置基本结构配置文件base.ldif</p>
<pre><code>dn: dc=itzgeek,dc=local
dc: itzgeek
objectClass: top
objectClass: domain

dn: cn=admin ,dc=itzgeek,dc=local
objectClass: organizationalRole
cn: admin
description: LDAP Manager

dn: ou=People,dc=itzgeek,dc=local
objectClass: organizationalUnit
ou: People

dn: ou=Group,dc=itzgeek,dc=local
objectClass: organizationalUnit
ou: Group
</code></pre>
<p>生成目录结构：</p>
<pre><code>ldapadd -x -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; -f base.ldif
</code></pre>
<p>要输入<code>cn=admin,dc=itzgeek,dc=local</code>的密码才可以</p>
<p>输出内容：</p>
<pre><code>Enter LDAP Password:
adding new entry &quot;dc=itzgeek,dc=local&quot;

adding new entry &quot;cn=admin ,dc=itzgeek,dc=local&quot;

adding new entry &quot;ou=People,dc=itzgeek,dc=local&quot;

adding new entry &quot;ou=Group,dc=itzgeek,dc=local&quot;
</code></pre>
<p>使用<code>JXplorer</code>查看目录树<br>
<img src="https://mrpingan.github.io/post-images/1567842998859.png" alt=""></p>
<h1 id="创建ldap用户">创建LDAP用户</h1>
<pre><code>vi raj.ldif
</code></pre>
<p>写入以下内容：</p>
<pre><code>dn: uid=raj,ou=People,dc=itzgeek,dc=local
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: raj
uid: raj
uidNumber: 9999
gidNumber: 100
homeDirectory: /home/raj
loginShell: /bin/bash
gecos: Raj [Admin (at) ITzGeek]
userPassword: {crypt}x
shadowLastChange: 17058
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
</code></pre>
<p>把配置写入LDAP服务端</p>
<pre><code>ldapadd -x -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; -f raj.ldif
</code></pre>
<p>输出如下：</p>
<pre><code>Enter LDAP Password:
adding new entry &quot;uid=raj,ou=People,dc=itzgeek,dc=local&quot;
</code></pre>
<p>给<code>raj</code>用户设置一个密码</p>
<pre><code>ldappasswd -s password123 -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; -x &quot;uid=raj,ou=People,dc=itzgeek,dc=local&quot;
</code></pre>
<p>-s 给指定用户指定密码<br>
-x 指定配置密码用户<br>
-D 指定可以修改密码的dn<br>
验证<code>raj</code>用户：</p>
<pre><code>ldapsearch -x cn=raj -b dc=itzgeek,dc=local
</code></pre>
<p>输出如下：</p>
<pre><code># extended LDIF
#
# LDAPv3
# base &lt;dc=itzgeek,dc=local&gt; with scope subtree
# filter: cn=raj
# requesting: ALL
#

# raj, People, itzgeek.local
dn: uid=raj,ou=People,dc=itzgeek,dc=local
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: raj
uid: raj
uidNumber: 9999
gidNumber: 100
homeDirectory: /home/raj
loginShell: /bin/bash
gecos: Raj [Admin (at) ITzGeek]
shadowLastChange: 17058
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
userPassword:: e1NTSEF9SmwvcUZRSzAzRVV0dmZ0UXNPYU9zZjdvdWdDRGR2dlA=

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
</code></pre>
<p>删除一个条目：</p>
<pre><code>ldapdelete -W -D &quot;cn=admin,dc=itzgeek,dc=local&quot; &quot;uid=raj,ou=People,dc=itzgeek,dc=local&quot;
</code></pre>
<h1 id="防火墙">防火墙</h1>
<p>如果开启了防火墙，要在防火墙上开启端口TCP(389)</p>
<pre><code>firewall-cmd --permanent --add-service=ldap
firewall-cmd --reload
</code></pre>
<h1 id="开启ldap日志">开启LDAP日志</h1>
<p>pass</p>
<h1 id="ldap客户端配置">LDAP客户端配置</h1>
<p>在客户端机器上安装必要的包</p>
<pre><code>yum install -y openldap-clients nss-pam-ldapd
</code></pre>
<p>执行下面的命令将客户端注册到LDAP服务端上,192.168.33.11是LDAP服务端的IP地址</p>
<pre><code>authconfig --enableldap --enableldapauth --ldapserver=192.168.33.11 --ldapbasedn=&quot;dc=itzgeek,dc=local&quot; --enablemkhomedir --update
</code></pre>
<p>重启LDAP客户端服务</p>
<pre><code>systemctl restart  nslcd
</code></pre>
<h1 id="验证ldap登录">验证LDAP登录</h1>
<p>使用<code>getent</code>命令来从LDAP服务端获取条目</p>
<pre><code>getent passwd raj
</code></pre>
<p>输出：</p>
<pre><code>raj:x:9999:100:Raj [Admin (at) ITzGeek]:/home/raj:/bin/bash
</code></pre>
<p>为了验证，在客户端机器上使用LDAP用户<code>raj</code>登录</p>
<pre><code>ssh raj@192.168.33.12
</code></pre>
<p><img src="https://mrpingan.github.io/post-images/1567846300534.png" alt=""><br>
登录成功之后，就会创建一个家目录，由于我是第二次登录，所以看不到创建家目录的提示信息。</p>
]]></content>
    </entry>
</feed>